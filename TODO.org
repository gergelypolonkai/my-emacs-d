* Extending =insert-pair=

  Here are some more pairs to be added later

  （） ［］ ｛｝ ｟｠
  ⦅⦆ 〚〛 ⦃⦄ 「」 〈〉 《》 【】 〔〕 ⦗⦘
  『』 〖〗 〘〙
  ｢｣
  ⟦⟧ ⟨⟩ ⟪⟫ ⟮⟯ ⟬⟭ ⌈⌉ ⌊⌋ ⦇⦈ ⦉⦊
  ❛❜ ❝❞ ❨❩ ❪❫ ❴❵ ❬❭ ❮❯ ❰❱ ❲❳
  ﴾﴿
  ⏜⏝ ⎴⎵ ⏞⏟ ⏠⏡
  ﹁﹂ ﹃﹄ ︹︺ ︻︼ ︗︘ ︿﹀ ︽︾ ﹇﹈ ︷︸
  〈〉 ⦑⦒ ⧼⧽
  ﹙﹚ ﹛﹜ ﹝﹞
  ⁽⁾ ₍₎
  ⦋⦌ ⦍⦎ ⦏⦐ ⁅⁆
  ⸢⸣ ⸤⸥
  ⟅⟆ ⦓⦔ ⦕⦖ ⸦⸧ ⸨⸩ ⧘⧙ ⧚⧛; ⸜⸝ ⸌⸍ ⸂⸃ ⸄⸅ ⸉⸊
  ᚛᚜ ༺༻ ༼༽

* Some more settings for c-mode

  #+BEGIN_SRC elisp
  (c-add-style "my"
               '(
                 (c-basic-offset . 4)
                 (c-offsets-alist
                  (arglist-cont . 0)
                  (arglist-intro . ++)
                  (block-close . 0)
                  (brace-entry-open . 0)
                  (brace-list-close . 0)
                  (brace-list-intro . +)
                  (case-label . +)
                  (class-close . 0)
                  (defun-block-intro . +)
                  (defun-close . 0)
                  (defun-open . 0)
                  (inclass . +)
                  (statement . 0)
                  (statement-block-intro . +)
                  (statement-case-intro . +)
                  (statement-cont . 4)
                  (substatement-open . 0)
                  (topmost-intro . 0)
                  (topmost-intro-cont . 0)
                  (access-label . -)
                  (annotation-top-cont . 0)
                  (annotation-var-cont . +)
                  (arglist-close . c-lineup-close-paren)
                  (arglist-cont-nonempty . c-lineup-arglist)
                  (block-open . 0)
                  (brace-list-entry . 0)
                  (brace-list-open . 0)
                  (c . c-lineup-C-comments)
                  (catch-clause . 0)
                  (class-open . 0)
                  (comment-intro . c-lineup-comment)
                  (composition-close . 0)
                  (composition-open . 0)
                  (cpp-define-intro c-lineup-cpp-define +)
                  (cpp-macro . -1000)
                  (cpp-macro-cont . +)
                  (do-while-closure . 0)
                  (else-clause . 0)
                  (extern-lang-close . 0)
                  (extern-lang-open . 0)
                  (friend . 0)
                  (func-decl-cont . +)
                  (incomposition . +)
                  (inexpr-class . +)
                  (inexpr-statement . +)
                  (inextern-lang . +)
                  (inher-cont . c-lineup-multi-inher)
                  (inher-intro . +)
                  (inlambda . c-lineup-inexpr-block)
                  (inline-close . 0)
                  (inline-open . +)
                  (inmodule . +)
                  (innamespace . +)
                  (knr-argdecl . 0)
                  (knr-argdecl-intro . +)
                  (label . 2)
                  (lambda-intro-cont . +)
                  (member-init-cont . c-lineup-multi-inher)
                  (member-init-intro . +)
                  (module-close . 0)
                  (module-open . 0)
                  (namespace-close . 0)
                  (namespace-open . 0)
                  (objc-method-args-cont . c-lineup-ObjC-method-args)
                  (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
                  (objc-method-intro .
                                     [0])
                  (statement-case-open . 0)
                  (stream-op . c-lineup-streamop)
                  (string . -1000)
                  (substatement . +)
                  (substatement-label . 2)
                  (template-args-cont c-lineup-template-args +))))
  #+END_SRC
